{"ast":null,"code":"import{minutesToDuration,secondsToDuration}from\"../utils/duration/index.js\";import React from\"react\";// The single purpose of this component display the the countdown.\nfunction Progress(_ref){var focusDuration=_ref.focusDuration,breakDuration=_ref.breakDuration,session=_ref.session,isTimerRunning=_ref.isTimerRunning;if(session===null)return null;var currentDuration=(session===null||session===void 0?void 0:session.label)===\"Focusing\"?focusDuration*60:breakDuration*60;var percent=(currentDuration-(session===null||session===void 0?void 0:session.timeRemaining))/currentDuration*100;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"h2\",{\"data-testid\":\"session-title\"},(session===null||session===void 0?void 0:session.label)===\"Focusing\"?\"Focusing for \".concat(minutesToDuration(focusDuration),\" minutes\"):\"On Break for 0\".concat(breakDuration,\":00 minutes\")),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\",\"data-testid\":\"session-sub-title\"},secondsToDuration(session===null||session===void 0?void 0:session.timeRemaining),\" remaining\"),/*#__PURE__*/React.createElement(\"h3\",null,!isTimerRunning?\"PAUSED\":null))),/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"div\",{className:\"progress\",style:{height:\"20px\"}},/*#__PURE__*/React.createElement(\"div\",{className:\"progress-bar\",role:\"progressbar\",\"aria-valuemin\":\"0\",\"aria-valuemax\":\"100\",\"aria-valuenow\":percent// TODO: Increase aria-valuenow as elapsed time increases\n,style:{width:\"\".concat(percent,\"%\")}// TODO: Increase width % as elapsed time increases\n})))));}export default Progress;","map":{"version":3,"sources":["C:/Users/Schen/thinkful/vscode/Project_Pomodoro_Timer_Qualified_1/src/progress/Progress.js"],"names":["minutesToDuration","secondsToDuration","React","Progress","focusDuration","breakDuration","session","isTimerRunning","currentDuration","label","percent","timeRemaining","height","width"],"mappings":"AAAA,OAAQA,iBAAR,CAA0BC,iBAA1B,KAAkD,4BAAlD,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AAEA,QAASC,CAAAA,QAAT,MAA2E,IAAxDC,CAAAA,aAAwD,MAAxDA,aAAwD,CAAzCC,aAAyC,MAAzCA,aAAyC,CAA1BC,OAA0B,MAA1BA,OAA0B,CAAjBC,cAAiB,MAAjBA,cAAiB,CACvE,GAAID,OAAO,GAAK,IAAhB,CAAsB,MAAO,KAAP,CAEtB,GAAIE,CAAAA,eAAe,CAAG,CAAAF,OAAO,OAAP,EAAAA,OAAO,SAAP,QAAAA,OAAO,CAAEG,KAAT,IAAmB,UAAnB,CAAgCL,aAAa,CAAG,EAAhD,CAAqDC,aAAa,CAAG,EAA3F,CACJ,GAAIK,CAAAA,OAAO,CAAI,CAACF,eAAe,EAAGF,OAAH,SAAGA,OAAH,iBAAGA,OAAO,CAAEK,aAAZ,CAAhB,EAA6CH,eAA9C,CAAiE,GAA/E,CAEG,mBACH,4CAEQ,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eAEE,0BAAI,cAAY,eAAhB,EACX,CAAAF,OAAO,OAAP,EAAAA,OAAO,SAAP,QAAAA,OAAO,CAAEG,KAAT,IAAmB,UAAnB,wBAAgDT,iBAAiB,CAACI,aAAD,CAAjE,qCAA8GC,aAA9G,eADW,CAFF,cAME,yBAAG,SAAS,CAAC,MAAb,CAAoB,cAAY,mBAAhC,EACGJ,iBAAiB,CAACK,OAAD,SAACA,OAAD,iBAACA,OAAO,CAAEK,aAAV,CADpB,cANF,cAUE,8BAAK,CAACJ,cAAD,CAAkB,QAAlB,CAA4B,IAAjC,CAVF,CADF,CAFR,cAiBQ,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,UAAf,CAA0B,KAAK,CAAE,CAAEK,MAAM,CAAE,MAAV,CAAjC,eACE,2BACE,SAAS,CAAC,cADZ,CAEE,IAAI,CAAC,aAFP,CAGE,gBAAc,GAHhB,CAIE,gBAAc,KAJhB,CAKE,gBAAeF,OAAS;AAL1B,CAME,KAAK,CAAE,CAAEG,KAAK,WAAKH,OAAL,KAAP,CAA0B;AANnC,EADF,CADF,CADF,CAjBR,CADG,CAkCF,CAED,cAAeP,CAAAA,QAAf","sourcesContent":["import {minutesToDuration,secondsToDuration} from \"../utils/duration/index.js\"\nimport React from \"react\";\n\n// The single purpose of this component display the the countdown.\n\nfunction Progress({focusDuration, breakDuration, session, isTimerRunning}) {\n    if (session === null) return null;\n   \n    let currentDuration = session?.label === \"Focusing\" ? focusDuration * 60 : breakDuration * 60;\nlet percent = ((currentDuration - session?.timeRemaining) / currentDuration) * 100;\n\n   return (\n<div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n{session?.label === \"Focusing\" ? `Focusing for ${minutesToDuration(focusDuration)} minutes` : `On Break for 0${breakDuration}:00 minutes`}\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session?.timeRemaining)} remaining\n            </p>\n\n            <h3>{!isTimerRunning ? \"PAUSED\": null}</h3>\n\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${percent}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default Progress;"]},"metadata":{},"sourceType":"module"}